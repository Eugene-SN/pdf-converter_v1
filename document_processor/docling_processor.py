#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Docling Processor –¥–ª—è PDF Converter Pipeline v4.0
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docling API
"""

import os
import sys
import asyncio
import logging
from typing import Dict, List, Optional, Any, Tuple, Union
from pathlib import Path
import tempfile
import json
from dataclasses import dataclass
from datetime import datetime

# Docling –∏–º–ø–æ—Ä—Ç—ã
from docling.document_converter import DocumentConverter
from docling.datamodel.base_models import InputFormat
from docling.datamodel.pipeline_options import PdfPipelineOptions
from docling.backend.pypdfium2_backend import PyPdfiumDocumentBackend

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import structlog
import numpy as np
from PIL import Image
import pandas as pd
import re

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import shutil
from pathlib import Path

# Prometheus –º–µ—Ç—Ä–∏–∫–∏
from prometheus_client import Counter, Histogram, Gauge

# =======================================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ú–ï–¢–†–ò–ö–ò
# =======================================================================================

logger = structlog.get_logger("docling_processor")

# –ú–µ—Ç—Ä–∏–∫–∏ Prometheus
docling_requests = Counter('docling_requests_total', 'Total Docling processing requests', ['status'])
docling_duration = Histogram('docling_processing_duration_seconds', 'Docling processing duration')
docling_pages = Histogram('docling_pages_processed', 'Pages processed by Docling')
docling_elements = Counter('docling_elements_extracted', 'Elements extracted by type', ['element_type'])

@dataclass
class DoclingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docling –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    model_path: str = "/mnt/storage/models/shared/docling"
    use_gpu: bool = False
    max_workers: int = 4
    timeout: int = 300
    cache_dir: str = "/app/cache"
    temp_dir: str = "/app/temp"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    extract_images: bool = True
    extract_tables: bool = True
    extract_formulas: bool = True
    high_quality_ocr: bool = True
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    chinese_language_support: bool = True
    preserve_chinese_layout: bool = True
    mixed_language_mode: bool = True

# =======================================================================================
# –û–°–ù–û–í–ù–´–ï –¢–ò–ü–´ –î–ê–ù–ù–´–•
# =======================================================================================

@dataclass
class ProcessedElement:
    """–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    element_type: str
    content: str
    bbox: Optional[Tuple[float, float, float, float]] = None
    page_number: int = 0
    confidence: float = 1.0
    metadata: Dict[str, Any] = None

    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}

@dataclass
class DocumentStructure:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    title: Optional[str] = None
    authors: List[str] = None
    sections: List[Dict[str, Any]] = None
    tables: List[Dict[str, Any]] = None
    images: List[Dict[str, Any]] = None
    formulas: List[Dict[str, Any]] = None
    metadata: Dict[str, Any] = None

    def __post_init__(self):
        if self.authors is None:
            self.authors = []
        if self.sections is None:
            self.sections = []
        if self.tables is None:
            self.tables = []
        if self.images is None:
            self.images = []
        if self.formulas is None:
            self.formulas = []
        if self.metadata is None:
            self.metadata = {}

# =======================================================================================
# DOCLING PROCESSOR –ö–õ–ê–°–°  
# =======================================================================================

class DoclingProcessor:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —á–µ—Ä–µ–∑ Docling"""

    def __init__(self, config: Optional[DoclingConfig] = None):
        self.config = config or DoclingConfig()
        self.use_ocr = getattr(self.config, 'use_ocr', True)
        self.converter: Optional[DocumentConverter] = None
        self.logger = structlog.get_logger("docling_processor")

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path(self.config.cache_dir).mkdir(parents=True, exist_ok=True)
        Path(self.config.temp_dir).mkdir(parents=True, exist_ok=True)

        self._initialize_converter()

    def _initialize_converter(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docling –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
        try:
            from docling.datamodel.base_models import InputFormat
            from docling.document_converter import PdfFormatOption

            # ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
            pdf_format_options = PdfFormatOption(
                backend=PyPdfiumDocumentBackend,
                pipeline_options=PdfPipelineOptions(
                    enable_layout_analysis=True,
                    enable_ocr=self.use_ocr,
                    images_scale=1.0,
                    generate_page_images=False,
                    generate_table_images=False,
                    generate_picture_images=False
                )
            )

            self.converter = DocumentConverter(
                format_options={
                    InputFormat.PDF: pdf_format_options
                }
            )

            self.logger.info("Docling converter initialized successfully")

        except Exception as e:
            self.logger.error(f"Failed to initialize Docling converter: {e}")
            raise

    async def process_document(self, pdf_path: str, output_dir: str, use_ocr: bool = True) -> DocumentStructure:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        start_time = datetime.now()
        
        try:
            docling_requests.labels(status='started').inc()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not Path(pdf_path).exists():
                raise FileNotFoundError(f"PDF file not found: {pdf_path}")

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            with tempfile.TemporaryDirectory(dir=self.config.temp_dir) as temp_dir:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                self.logger.info(f"Starting Docling conversion for: {pdf_path}")
                conv_result = self.converter.convert(pdf_path)
                # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É OCR
                self.use_ocr = use_ocr
                logger.info(f"üì• OCR setting: {use_ocr}")
                logger.info(f"‚ñ∂ Docling initialised with OCR: {self.use_ocr}")

                # ‚úÖ –ù–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –ø–æ—Å–º–æ—Ç—Ä–∏–º –í–°–ï –∞—Ç—Ä–∏–±—É—Ç—ã PageItem
                self.logger.info(f"üîç DEBUG: Document pages type: {type(conv_result.document.pages)}")
                self.logger.info(f"üîç DEBUG: Document pages count: {len(conv_result.document.pages)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –∞—Ç—Ä–∏–±—É—Ç—ã –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if conv_result.document.pages:
                    first_page_key = list(conv_result.document.pages.keys())[0]
                    first_page = conv_result.document.pages[first_page_key]
                    all_attrs = [attr for attr in dir(first_page) if not attr.startswith('_')]
                    self.logger.info(f"üîç DEBUG: Page {first_page_key} ALL attributes: {all_attrs}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    for attr in ['elements', 'items', 'content', 'text', 'layout', 'blocks']:
                        if hasattr(first_page, attr):
                            self.logger.info(f"üîç DEBUG: Page has attribute '{attr}': {getattr(first_page, attr, None)}")

                # ‚úÖ –ù–û–í–´–ô –ü–û–î–•–û–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º export –º–µ—Ç–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
                document_structure = await self._extract_document_structure_new(
                    conv_result, temp_dir, output_dir
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                duration = (datetime.now() - start_time).total_seconds()
                docling_duration.observe(duration)
                docling_pages.observe(len(conv_result.document.pages))
                docling_requests.labels(status='completed').inc()

                self.logger.info(
                    f"Document processed successfully in {duration:.2f}s",
                    pages=len(conv_result.document.pages),
                    elements=len(document_structure.sections) + len(document_structure.tables)
                )

                return document_structure

        except Exception as e:
            docling_requests.labels(status='error').inc()
            self.logger.error(f"Error processing document {pdf_path}: {e}")
            raise

    async def _extract_document_structure_new(
        self,
        conv_result,
        temp_dir: str,
        output_dir: str
    ) -> DocumentStructure:
        """‚úÖ –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Docling API"""
        
        document = conv_result.document
        structure = DocumentStructure()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        structure.metadata = {
            "total_pages": len(document.pages),
            "processing_time": datetime.now().isoformat(),
            "docling_version": "1.5.0",
            "language_detected": "mixed"
        }

        try:
            # ‚úÖ –ú–ï–¢–û–î 1: –ü–æ–ø—Ä–æ–±—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ç–µ–∫—Å—Ç
            try:
                full_text = document.export_to_text()
                if full_text and len(full_text.strip()) > 10:
                    self.logger.info(f"‚úÖ SUCCESS: Extracted {len(full_text)} chars via export_to_text")
                    structure.sections = await self._parse_exported_text(full_text)
                    structure.title = await self._extract_title_from_text(full_text)
                else:
                    self.logger.warning("export_to_text returned empty or short text")
            except Exception as e:
                self.logger.warning(f"export_to_text failed: {e}")

            # ‚úÖ –ú–ï–¢–û–î 2: –ü–æ–ø—Ä–æ–±—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ Markdown
            if not structure.sections:
                try:
                    markdown_text = document.export_to_markdown()
                    if markdown_text and len(markdown_text.strip()) > 10:
                        self.logger.info(f"‚úÖ SUCCESS: Extracted {len(markdown_text)} chars via export_to_markdown")
                        structure.sections = await self._parse_markdown_content(markdown_text)
                        if not structure.title:
                            structure.title = await self._extract_title_from_text(markdown_text)
                    else:
                        self.logger.warning("export_to_markdown returned empty or short text")
                except Exception as e:
                    self.logger.warning(f"export_to_markdown failed: {e}")

            # ‚úÖ –ú–ï–¢–û–î 3: –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ content —Å—Ç—Ä–∞–Ω–∏—Ü
            if not structure.sections:
                structure.sections = await self._extract_via_page_content(document)

            # ‚úÖ –ú–ï–¢–û–î 4: Fallback - —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–µ–∫—Ü–∏—é
            if not structure.sections:
                structure.sections = [{
                    'title': 'Document Content',
                    'level': 1,
                    'page': 1,
                    'content': f'Processed document with {len(document.pages)} pages using Docling',
                    'subsections': []
                }]

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if self.config.extract_tables:
                structure.tables = await self._extract_tables_new(document, temp_dir, output_dir)

            if self.config.extract_images:
                structure.images = await self._extract_images_new(document, temp_dir, output_dir)

            self.logger.info(f"Final extraction result: {len(structure.sections)} sections, {len(structure.tables)} tables, {len(structure.images)} images")

        except Exception as e:
            self.logger.error(f"Error in new document structure extraction: {e}")
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            structure.sections = [{
                'title': 'Error Processing Document',
                'level': 1,
                'page': 1,
                'content': f'Document processing encountered errors: {str(e)}',
                'subsections': []
            }]

        return structure

    async def _parse_exported_text(self, full_text: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–µ–∫—Ü–∏–∏"""
        sections = []
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã
            paragraphs = [p.strip() for p in full_text.split('\n\n') if p.strip()]
            
            current_section = None
            
            for i, paragraph in enumerate(paragraphs):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                if self._looks_like_heading(paragraph):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
                    if current_section:
                        sections.append(current_section)
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                    current_section = {
                        'title': paragraph[:200],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        'level': self._get_heading_level_from_text(paragraph),
                        'page': 1,  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
                        'content': '',
                        'subsections': []
                    }
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
                    if current_section:
                        current_section['content'] += paragraph + '\n\n'
                    else:
                        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        current_section = {
                            'title': 'Document Content',
                            'level': 1,
                            'page': 1,
                            'content': paragraph + '\n\n',
                            'subsections': []
                        }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
            if current_section:
                sections.append(current_section)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–º
            if not sections:
                sections = [{
                    'title': 'Document Content',
                    'level': 1,
                    'page': 1,
                    'content': full_text,
                    'subsections': []
                }]
            
            self.logger.info(f"Parsed {len(sections)} sections from exported text")
            
        except Exception as e:
            self.logger.error(f"Error parsing exported text: {e}")
            sections = [{
                'title': 'Document Content',
                'level': 1,
                'page': 1,
                'content': full_text,
                'subsections': []
            }]
        
        return sections

    async def _parse_markdown_content(self, markdown_text: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–µ–∫—Ü–∏–∏"""
        sections = []
        
        try:
            lines = markdown_text.split('\n')
            current_section = None
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ Markdown
                if line.startswith('#'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
                    if current_section:
                        sections.append(current_section)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    level = 1
                    while line.startswith('#' * (level + 1)):
                        level += 1
                    
                    title = line.lstrip('#').strip()
                    
                    current_section = {
                        'title': title,
                        'level': level,
                        'page': 1,
                        'content': '',
                        'subsections': []
                    }
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
                    if current_section:
                        current_section['content'] += line + '\n'
                    else:
                        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        current_section = {
                            'title': 'Document Content',
                            'level': 1,
                            'page': 1,
                            'content': line + '\n',
                            'subsections': []
                        }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
            if current_section:
                sections.append(current_section)
            
            if not sections:
                sections = [{
                    'title': 'Document Content',
                    'level': 1,
                    'page': 1,
                    'content': markdown_text,
                    'subsections': []
                }]
            
            self.logger.info(f"Parsed {len(sections)} sections from markdown")
            
        except Exception as e:
            self.logger.error(f"Error parsing markdown: {e}")
            sections = [{
                'title': 'Document Content',
                'level': 1,
                'page': 1,
                'content': markdown_text,
                'subsections': []
            }]
        
        return sections

    async def _extract_via_page_content(self, document) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü"""
        sections = []
        
        try:
            for page_num, page in document.pages.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                page_content = ""
                
                for attr in ['content', 'text', 'body', 'data']:
                    if hasattr(page, attr):
                        content = getattr(page, attr)
                        if content and str(content).strip():
                            page_content = str(content)
                            break
                
                if page_content:
                    sections.append({
                        'title': f'Page {page_num}',
                        'level': 1,
                        'page': page_num,
                        'content': page_content,
                        'subsections': []
                    })
            
            self.logger.info(f"Extracted {len(sections)} sections via page content")
            
        except Exception as e:
            self.logger.error(f"Error extracting via page content: {e}")
        
        return sections

    async def _extract_title_from_text(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            lines = text.split('\n')
            for line in lines[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                line = line.strip()
                if line and len(line) > 5 and len(line) < 200:
                    # –£–±–∏—Ä–∞–µ–º Markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    title = line.lstrip('#').strip()
                    if title:
                        return title
            return None
        except Exception:
            return None

    def _looks_like_heading(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        text = text.strip()
        
        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
        if len(text) < 3 or len(text) > 200:
            return False
        
        # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
        if text.endswith(':'):
            return True
        
        # –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ (–Ω—É–º–µ—Ä–∞—Ü–∏—è)
        if re.match(r'^\d+[\.\)]\s+', text):
            return True
        
        # –í–µ—Å—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ –∫–æ—Ä–æ—Ç–∫–∏–π
        if text.isupper() and len(text) < 100:
            return True
        
        # –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        heading_keywords = ['Á´†', 'ËäÇ', 'ÈÉ®ÂàÜ', 'Á¨¨', 'ÁØá', 'chapter', 'section', 'part']
        if any(keyword in text.lower() for keyword in heading_keywords):
            return True
        
        return False

    def _get_heading_level_from_text(self, text: str) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã - —É—Ä–æ–≤–µ–Ω—å 1
        if re.match(r'^\d+[\.\)]', text):
            return 1
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—É—Ä–æ–≤–Ω–∏ (1.1, 1.1.1)
        if re.match(r'^\d+\.\d+', text):
            return 2
        
        if re.match(r'^\d+\.\d+\.\d+', text):
            return 3
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 1

    async def _extract_tables_new(self, document, temp_dir: str, output_dir: str) -> List[Dict[str, Any]]:
        """–ù–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - —Ç–∞–±–ª–∏—Ü—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
        return []

    async def _extract_images_new(self, document, temp_dir: str, output_dir: str) -> List[Dict[str, Any]]:
        """–ù–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ  
        return []

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async def _extract_title(self, document) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return None

    async def _extract_sections(self, document) -> List[Dict[str, Any]]:
        """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return []

    def _get_heading_level(self, element_type: str) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        level_map = {
            'title': 1,
            'h1': 1,
            'heading': 1,
            'h2': 2,
            'h3': 3,
        }
        return level_map.get(element_type, 1)

    async def _extract_tables(self, document, temp_dir: str, output_dir: str) -> List[Dict[str, Any]]:
        """–°—Ç–∞—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        return []

    async def _extract_images(self, document, temp_dir: str, output_dir: str) -> List[Dict[str, Any]]:
        """–°—Ç–∞—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        return []

    async def _extract_formulas(self, document) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª"""
        return []

    def export_to_markdown(self, structure: DocumentStructure, output_path: str) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Markdown"""
        try:
            md_content = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if structure.title:
                md_content.append(f"# {structure.title}\n")

            # –†–∞–∑–¥–µ–ª—ã
            for section in structure.sections:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
                level_prefix = "#" * section['level']
                md_content.append(f"{level_prefix} {section['title']}\n")

                # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
                if section['content']:
                    md_content.append(f"{section['content']}\n")

            # –¢–∞–±–ª–∏—Ü—ã
            if structure.tables:
                md_content.append("## Tables\n")
                for table in structure.tables:
                    md_content.append(f"### Table {table['id']} (Page {table['page']})\n")
                    md_content.append(f"Rows: {table['rows']}, Columns: {table['columns']}\n")
                    md_content.append(f"File: `{table['file_path']}`\n\n")

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if structure.images:
                md_content.append("## Images\n")
                for image in structure.images:
                    md_content.append(f"### Image {image['id']} (Page {image['page']})\n")
                    md_content.append(f"![Image {image['id']}]({image['file_path']})\n")
                    if image.get('caption'):
                        md_content.append(f"*{image['caption']}*\n\n")
                    else:
                        md_content.append("\n")

            # –§–æ—Ä–º—É–ª—ã
            if structure.formulas:
                md_content.append("## Formulas\n")
                for formula in structure.formulas:
                    md_content.append(f"### Formula {formula['id']} (Page {formula['page']})\n")
                    md_content.append(f"``````\n\n")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(md_content))

            self.logger.info(f"Markdown exported to: {output_path}")

            return '\n'.join(md_content)

        except Exception as e:
            self.logger.error(f"Error exporting to markdown: {e}")
            raise

# =======================================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =======================================================================================

def create_docling_processor(config: Optional[DoclingConfig] = None) -> DoclingProcessor:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Docling –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    return DoclingProcessor(config)

async def process_pdf_with_docling(
    pdf_path: str,
    output_dir: str,
    config: Optional[DoclingConfig] = None
) -> DocumentStructure:
    """
    –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
    """
    processor = create_docling_processor(config)
    return await processor.process_document(pdf_path, output_dir)

# =======================================================================================
# –û–°–ù–û–í–ù–û–ô –ë–õ–û–ö –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# =======================================================================================

if __name__ == "__main__":
    async def main():
        config = DoclingConfig()
        processor = DoclingProcessor(config)

        pdf_path = "/app/temp/test_document.pdf"
        output_dir = "/app/temp/output"

        if Path(pdf_path).exists():
            structure = await processor.process_document(pdf_path, output_dir)

            md_path = Path(output_dir) / "document.md"
            processor.export_to_markdown(structure, str(md_path))

            print(f"Document processed successfully!")
            print(f"Sections: {len(structure.sections)}")
            print(f"Tables: {len(structure.tables)}")
            print(f"Images: {len(structure.images)}")
        else:
            print(f"Test file not found: {pdf_path}")

    asyncio.run(main())
